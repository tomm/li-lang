* should check for invalid assignment to temporaries in frontend - but only
  backend knows about temporaryness...
* many compile errors still need to be moved from backend to frontend
* structs
* unions
* allow `const myfnptr = myfn@` in global scope
* const in local scope
* compile-time constants (macro rLCDC { 0xff40 as &u8 })
* unused number literal causes backend crash. ie `1;`
* do while loop
* switch
* working return-in-memory codegen.
  idea: desugar these function calls to a fn-top-scoped var myTmp: [u8; 123]
  and a myFn(myTmp@, arg0, arg1, etc)
* int + &T
* &T - &T
* enforce constness
* escape chars in strings lead to wrong type length calculation
* declaration in if (if (var x = blah) {)
* move integer casts to be builtin operations

missing operators:
  ++, -- (but maybe not)
  sizeof
  lenof
