asm("
; 248 cycles
__mul8:
    ; a = a*b
        ld c, a
        xor a, a
    REPT 8
        srl b
        jr nc, .no\@
        add a, c
    .no\@
        sla c
    ENDR
        ret

; 700 cycles
__mul16:
    ; hl = hl*de
        ld b, h
        ld c, l
        xor a
        ld h, a
        ld l, a
    REPT 16
        srl b
        rr c
        jr nc, .no\@
        add hl, de
    .no\@
        sla e
        rl d
    ENDR
        ret

__divu8:
    ; [remainder:quotient] b:a = a / b
        ld c, b
        ld b, a
        ld h, 0
        jr __div8

__divi8:
    ; [remainder:quotient] b:a = a / b
        ld c, b
        ld b, a

        ; h = qsign bit7, rsign bit0
        xor c
        ld h, a
        res 0, h
        bit 7, c
        jr z, .not_rsign
        set 0, h
    .not_rsign
        ; divisor = abs(divisor)
        bit 7, c
        jr z, .pve_divisor
        xor a
        sub c
        ld c, a
    .pve_divisor
        ; dividend = abs(dividend)
        bit 7, b
        jr z, .pve_dividend
        xor a
        sub b
        ld b, a
    .pve_dividend
        set 1, h ; is signed arith

__div8:
    ; [remainder:quotient] b:a = a / b
    ; a = abs(dividend), b = abs(divisor)
    ; h & 0x01 = remainder sign
    ; h & 0x02 = is signed arithmetic
    ; h & 0x80 = quotient sign
        xor a
        cp a, c
        jr z, .zero_divisor

        ; b / c
        ; find highest POT multiple of divisor (c) that is <= dividend (b)
        ; 
        ld e, c  ; e = multiple of c
        ld d, 1  ; d = e/c

    .potmul_loop
        bit 7, e
        jp nz, .found_max_pot

        sla d
        sla e
        ld a, b
        cp a, e
        jr c, .overshot
        jr z, .found_max_pot
        jr .potmul_loop

    .overshot
        srl d
        srl e
        ; found max multiple
    .found_max_pot

        ; now subtract decreasing POT multiples of c from b,
        ; composing the quotient
        ld l, 0 ; quotient

        bit 7, h
        jr z, .qsign_pve
        ; quotient = -mult<<1
        ld a, d
        sla a
        cpl
        inc a
        ld l, a
        ; remainder = (max_pot2_divisor<<1) - remainder
        ld a, e
        sla a
        sub b
        ld b, a
    .qsign_pve

        ; l = quot
        ; b = remainder
        ; d = mult
        ; e = pot2
    .div_loop
        ld a, b
        cp a, e
        jr c, .not_contain_this_pot
        ; subtract POT multiple of c from b
        ld a, b
        sub a, e
        ld b, a

        ; increase quotient
        ld a, l
        add a, d
        ld l, a
    .not_contain_this_pot
        srl e
        srl d
        jr nz, .div_loop

        ; if rsign; remainder = -remainder
        bit 0, h
        jr z, .rsign_pve
        xor a
        sub b
        ld b, a
    .rsign_pve

        ld a, l
        ret

    .zero_divisor
        ; saturation divide ;)
        ld b, 0
        ld a, 255
        bit 1, h
        ret z
        ld a, 127
        bit 7, h
        ret z
        ld a, -128
        ret

__divi16:
    ; remainder:quotient de:hl = hl / de
        ld a, h ; result flag: bit0: remainder -ve, bit7: result -ve
        xor d
        res 0, a
        bit 7, d
        jr z, .result_pve
        set 0, a
    .result_pve:
        ld b, a
        ; de = abs(de)
        bit 7, d
        jr z, .divisor_pve
        xor a
        ld c, a
        sub e
        ld e, a
        ld a, c
        sbc d
        ld d, a
    .divisor_pve:
        ; hl = abs(hl)
        bit 7, h
        jr z, .dividend_pve
        xor a
        ld c, a
        sub l
        ld l, a
        ld a, c
        sbc h
        ld h, a
    .dividend_pve:
        ; quotient, remainder sign flags passed in a
        ld a, b
        set 1, a ; is signed arith
        call __div16
        ret

__divu16:
        xor a

__div16:
    ; hl = abs(dividend), de = abs(divisor)
    ; a & 0x01 = remainder sign
    ; a & 0x02 = is signed arithmetic
    ; a & 0x80 = quotient sign
    ; returns remainder:quotient de:hl = hl / de
        push af

        ld a, d
        or e
        jp z, .zero_divisor

        ; find highest POT multiple of divisor that is <= dividend
        ; de = POT_mul (pot multiple of divisor)
        ; hl = dividend
        ; bc = mul_num (POT_mul / divisor)
        ld b, 0
        ld c, 1

    .potmul_loop
        ; if highest bit of POT_mul is set, can't rotate further
        bit 7, d
        jp nz, .found_max_pot

        ; POT_mul *= 2
        sla e
        rl d
        ; mul_num *= 2
        sla c
        rl b

        ; POT_mul > dividend? we overshot
        ld a, h
        cp a, d
        jr c, .overshot
        jr nz, .potmul_loop
        ld a, l
        cp a, e
        jr c, .overshot
        jr nz, .potmul_loop
        jr .found_max_pot

    .overshot
        ; POT_mul /= 2
        srl d
        rr e
        ; mul_num /= 2
        srl b
        rr c

    .found_max_pot
        ; now subtract decreasing POT multiples of divisor from dividendm composing the quotient

        push hl
        xor a
        ld l, a
        ld h, a
        push hl
        ; stack is:
        ; sp+0 = quotient
        ; sp+2 = remainder
        ; sp+5 = qsign, rsign flags

        ; regs are:
        ; de = POT_mul
        ; hl = <ptr temporary>
        ; bc = mul_num

        ld hl, sp+5
        bit 7, [hl]
        jr z, .div_loop
        ; if qsign
            ; quotient = -mult<<1
            ld hl, sp+0
            push bc
                sla c
                rl b

                xor a
                sub c
                ld [hl+], a

                ld a, 0
                sbc b
                ld [hl], a
            pop bc

            ; remainder = POT_mul<<1 - remainder
            ld hl, sp+2
            push de
                sla e
                rl d

                ld a, e
                sub [hl]
                ld [hl+], a

                ld a, d
                sbc [hl]
                ld [hl], a
            pop de

    .div_loop
        ; POT_mul > remainder?
        ld hl, sp+3

        ld a, [hl-] ; high byte of remainder
        cp a, d
        jr c, .not_contain_this_pot
        jr nz, .skip3

        ld a, [hl]
        cp a, e
        jr c, .not_contain_this_pot
    .skip3
        ; remainder -= POT_mul
        ld hl, sp+2

        ld a, [hl]
        sub a, e
        ld [hl+], a

        ld a, [hl]
        sbc a, d
        ld [hl], a

        ; quotient += mul_num
        ld hl, sp+0
        ld a, [hl]
        add a, c
        ld [hl+], a

        ld a, [hl]
        adc a, b
        ld [hl], a
    .not_contain_this_pot
        ; POT_ml /= 2
        srl d
        rr e
        ; mul_num /= 2
        srl b
        rr c

        ; if mul_num != 0 { goto .div_loop }
        ld a, b
        or a, c
        jr nz, .div_loop

        ; quotient to hl, remainder to de
        pop hl
        pop de
        pop af

        bit 0, a
        ret z
            ; if rsign: remainder -= remainder
            xor a
            sub e
            ld e, a
            ld a, 0
            sbc d
            ld d, a
            ret

    .zero_divisor
        ; saturation arith
        xor a
        ld d, a
        ld e, a

        ; unsigned: hl = 0xffff
        ld a, $ff
        ld h, a
        ld l, a
        pop bc

        bit 1, b
        ret z
        ; signed +ve: hl = 0x7fff
        ld h, $7f
        bit 7, b
        ret z
        ; signed -ve: hl = 0x8000
        inc h
        inc l
        ret
")
