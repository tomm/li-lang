include "li-code/softmath.li" // needed for integer multiply
include "li-code/gb_console.li"

fn test_u8_arith(a: u8, b: u8) -> u8 {
  2+b+a-3
}

fn test_u16_arith(a: u16, b: u16, c: u16, d: u8) -> u16 {
  a + b + c - 0x10f0 & 0x33cc | 0xf00f ^ d as u16
}

fn test_var_globals() -> void {
    test_u16 = 10
    test_u16 = test_u16 + test_u16
    test_u16 += 1
    expect(test_u16 == 21)

    // arrays
    test_arr_u8[0] = 3
    test_arr_u8[1] = test_arr_u8[0] + test_arr_u8[0]
    test_arr_u8[2] = test_arr_u8[1] + test_arr_u8[0]
    test_arr_u8[3] = test_arr_u8[2] + test_arr_u8[1]
    test_arr_2d_u16[0][0] = 0x1234
    test_arr_2d_u16[0][1] = test_arr_2d_u16[0][0] - 1
    test_arr_2d_u16[1][0] = test_arr_2d_u16[0][1] * 2
    test_arr_2d_u16[1][1] = test_arr_2d_u16[1][0] + test_arr_2d_u16[0][0]
    expect(test_arr_u8[0] == 3)
    expect(test_arr_u8[1] == 6)
    expect(test_arr_u8[2] == 9)
    expect(test_arr_u8[3] == 15)
    expect(test_arr_2d_u16[0][0] == 0x1234)
    expect(test_arr_2d_u16[0][1] == 0x1233)
    expect(test_arr_2d_u16[1][0] == 0x2466)
    expect(test_arr_2d_u16[1][1] == 0x369a)
    // with u16 indexes
    test_arr_2d_u16[1u16][1u16] = 513
    expect(test_arr_2d_u16[1u16][1u16] == 513)
}

var passes: u16,
    fails: u16,
    total: u16

var test_u16: u16,
    test_arr_u8: [u8; 4],
    test_arr_2d_u16: [[u16; 2]; 2]

fn pass() { passes = passes + 1 total = total + 1; }
fn fail_() { fails = fails + 1 total = total + 1; } // seems 'fail' is an rgbasm special thing...
fn expect(result: bool) { if result { pass() } else { fail_() } }

var elapsed_vblanks: u16

// on_vblank is a special function name. if it is defined then
// the li compiler will output a call to it from the vblank
// vector (ROM0 $40). You still need to enable interrupts, and
// enable the vblank interrupt flag specifically (bit 0 of $ffff)
// for the on_vblank handler to be called
fn on_vblank() {
    `push af
     push bc
     push de
     push hl`
    elapsed_vblanks = elapsed_vblanks + 1u16
    `pop hl
     pop de
     pop bc
     pop af`
}

fn enable_vblank() {
    asm("
        ld a, 1
        ld [$ffff], a   ; enable vblank interrupt
        ei
    ")
}

fn main() {
    passes = fails = total = 0

    console_init()
    puts("LI TEST SUITE\n\n" as @u8)

    // enable vblank interrupt (for timing)
    elapsed_vblanks = 0u16
    enable_vblank()

    // argument passing and arithmetic
    expect(test_u8_arith(4,0xf) == 0x12)
    // larger u16 arith expression requiring temporaries
    expect(test_u16_arith(0x6543, 0x4567, 0x1234, 0x20) == 0xf3ef)
    // casts
    expect(255u8 as i8 == -1i8)
    expect({var x=255u8 3u8 x as i8 == -1i8})
    expect(0xdeu8 as u16 == 0xdeu16)
    expect({var x=0xdeu8 x as u16 == 0xdeu16})
    expect({-1i8} as i16 == -1i16)
    expect({-1i8} as u16 == 255u16)
    // local scopes
    expect(test_local_scope(66) == 6)
    // forward/extern declarations
    expect(test_fwd_decl(2) == 3)
    // if expression
    expect({if 1==1 0xcafe_u16 else 0xdead_u16} == 0xcafe)
    expect({if 0==1 {0xcafe_u16} else {0xdead_u16}} == 0xdead)
    // == operator
    expect(eq_u8(4,4))
    expect(!eq_u8(5,6))
    expect(!eq_u8(9,6))
    
    expect(eq_i8(-4,-4))
    expect(!eq_i8(-5,-6))
    expect(!eq_i8(-9,-6))

    expect(eq_u16(0x1234, 0x1234))
    expect(!eq_u16(0x1234, 0x2345))
    expect(!eq_u16(0x1284, 0x2345))

    expect(eq_i16(-1234, -1234))
    expect(!eq_i16(-923, 348))
    // != operator
    expect(!neq_u8(4,4))
    expect(neq_u8(5,6))
    expect(neq_u8(9,6))

    expect(!neq_i8(-4,-4))
    expect(neq_i8(5,6))
    expect(neq_i8(-9,-6))

    expect(!neq_u16(0x1234, 0x1234))
    expect(neq_u16(0x1234, 0x2345))
    expect(neq_u16(0x1284, 0x2345))

    expect(!neq_i16(0x1234, 0x1234))
    expect(neq_i16(-1234, -2934));
    // > operator
    expect(gt_u8(5,4))
    expect(!gt_u8(2,6))
    expect(!gt_u8(6,6))

    expect(gt_i8(5,4))
    expect(!gt_i8(-2,6))
    expect(!gt_i8(-6,-6))

    expect(gt_u16(0x1234,0x1233))
    expect(!gt_u16(0x1234,0x1234))
    expect(!gt_u16(0x1234,0x1235))
    expect(gt_u16(0x1333,0x1233))
    expect(!gt_u16(0x1133,0x1233))

    expect(gt_i16(0x1234,0x1233))
    expect(gt_i16(0x1334,0x1234))
    expect(!gt_i16(0x1234,0x1234))
    expect(gt_i16(0x1234,0xffff))
    expect(gt_i16(0x1234,-1))
    expect(!gt_i16(0x1234,0x1334))
    expect(!gt_i16(0x1233,0x1234))
    // < operator
    expect(lt_u8(4,5))
    expect(!lt_u8(6,2))
    expect(!lt_u8(6,6))

    expect(lt_i8(4,5))
    expect(!lt_i8(2,-1))
    expect(!lt_i8(6,6))

    expect(lt_u16(0x1233,0x1234))
    expect(!lt_u16(0x1234,0x1234))
    expect(!lt_u16(0x1235,0x1234))
    expect(lt_u16(0x1233,0x1333))
    expect(!lt_u16(0x1233,0x1133))

    expect(!lt_i16(0x1234,0x1233))
    expect(!lt_i16(0x1334,0x1234))
    expect(!lt_i16(0x1234,0x1234))
    expect(!lt_i16(0x1234,0xffff))
    expect(!lt_i16(0x1234,-1))
    expect(lt_i16(0x1234,0x1334))
    expect(lt_i16(0x1233,0x1234))
    // >= operator
    expect(gte_u8(5,4))
    expect(!gte_u8(2,6))
    expect(gte_u8(6,6))

    expect(gte_i8(5,-4))
    expect(gte_i8(-2,-2))
    expect(!gte_i8(-4,-3))

    expect(gte_u16(0x1234,0x1233))
    expect(gte_u16(0x1234,0x1234))
    expect(!gte_u16(0x1234,0x1235))
    expect(gte_u16(0x1333,0x1233))
    expect(!gte_u16(0x1133,0x1233))

    expect(gte_i16(0x1234,0x1233))
    expect(gte_i16(0x1334,0x1234))
    expect(gte_i16(0x1234,0x1234))
    expect(gte_i16(0x1234,0xffff))
    expect(gte_i16(0x1234,-1))
    expect(!gte_i16(0x1234,0x1334))
    expect(!gte_i16(0x1233,0x1234))
    // <= operator
    expect(lte_u8(4,5))
    expect(!lte_u8(6,2))
    expect(lte_u8(6,6))

    expect(lte_i8(-4,5))
    expect(!lte_i8(-2,-6))
    expect(lte_i8(6,6))

    expect(lte_u16(0x1233,0x1234))
    expect(lte_u16(0x1234,0x1234))
    expect(!lte_u16(0x1235,0x1234))
    expect(lte_u16(0x1233,0x1333))
    expect(!lte_u16(0x1233,0x1133))

    expect(!lte_i16(0x1234,0x1233))
    expect(!lte_i16(0x1334,0x1234))
    expect(lte_i16(0x1234,0x1234))
    expect(!lte_i16(0x1234,0xffff))
    expect(!lte_i16(0x1234,-1))
    expect(lte_i16(0x1234,0x1334))
    expect(lte_i16(0x1233,0x1234))
    // logical ops
    expect(log_and(true,true))
    expect(!log_and(false,true))
    expect(!log_and(true,false))
    expect(!log_and(false,false))
    expect(log_or(true,true))
    expect(log_or(false,true))
    expect(log_or(true,false))
    expect(!log_or(false,false))
    expect(!log_not(true))
    expect(log_not(false))
    // bitwise
    expect(bitnot_u8(0xc0) == 0x3f)
    expect(bitnot_i8(-2) == 1)
    expect(bitnot_u16(0xfc0f) == 0x3f0)
    expect(bitand_u8(0x3c,0xf0) == 0x30)
    expect(bitand_i8(-42, -21) == -62)
    expect(bitand_u16(0x3cba,0xf00f) == 0x300a)
    expect(bitor_u8(0x3c,0xf0) == 0xfc)
    expect(bitor_i8(-42, -21) == -1)
    expect(bitor_u16(0x3cba,0xf00f) == 0xfcbf)
    expect(bitxor_u8(0x3c,0xf0) == 0xcc)
    expect(bitxor_i8(-42, -21) == 61)
    expect(bitxor_u16(0x3cba,0xf00f) == 0xccb5)
    // add, sub
    expect(add_u8(0xfe, 0x12) == 0x10)
    expect(add_i8(100, -10) == 90)
    expect(add_u16(0xfebc, 0x1234) == 0x10f0)
    expect(sub_u8(0xfe, 0x12) == 0xec)
    expect(sub_i8(100, -10) == 110)
    expect(sub_u16(0xfebc, 0x1234) == 0xec88)
    // multiply
    expect(mul_u8(5,5) == 25)
    expect(mul_u8(255,255) == 1)
    expect(mul_i8(-5,5) == -25)
    expect(mul_u16(255,255) == 0xfe01)
    expect(mul_u16(123,100) == 12300)
    // divide
    expect(div_u8(23,0) == 255) // saturation on zero divide :)
    expect(div_u8(133,200) == 0) // divisor > dividend
    expect(div_u8(255,7) == 36)
    expect(div_u8(5,5) == 1)
    expect(div_u8(10,5) == 2)

    expect(div_i8(10,5) == 2)
    expect(div_i8(10,-5) == -2)
    expect(div_i8(-10,5) == -2)
    expect(div_i8(-10,-5) == 2)
    expect(div_i8(-128,1) == -128)
    expect(div_i8(-127,-1) == 127)
    expect(div_i8(-128,-1) == -128) // because 2s complement ;)

    expect(div_u16(65535, 1) == 65535)
    expect(div_u16(65535, 2) == 32767)
    expect(div_u16(50845, 8969) == 5)
    expect(div_u16(1234, 0) == 65535)
    expect(div_u16(1234, 2000) == 0)
    expect(div_u16(44132, 127) == 347)
    // modulo
    expect(mod_u8(23,0) == 0)
    expect(mod_u8(133,200) == 133) // divisor > dividend
    expect(mod_u8(255,7) == 3)
    expect(mod_u8(5,5) == 0)

    expect(mod_i8(11,3) == 2)
    expect(mod_i8(-11,3) == -2)
    expect(mod_i8(11,-3) == 2)
    expect(mod_i8(-11,-3) == -2)

    expect(mod_u16(65535, 1) == 0)
    expect(mod_u16(65535, 2) == 1)
    expect(mod_u16(50845, 8969) == 6000)
    expect(mod_u16(1234, 0) == 0)
    expect(mod_u16(1234, 2000) == 1234)
    expect(mod_u16(44132, 127) == 63)
    // shifts
    expect(shl_u8(6, 0) == 6)
    expect(shl_u8(6, 3) == 48)
    expect(shr_u8(191, 0) == 191)
    expect(shr_u8(191, 3) == 23)
    expect(shl_i8(-20, 2) == -80)
    expect(shr_i8(-20, 2) == -5)
    expect(shl_u16(6789, 0) == 6789)
    expect(shl_u16(6789, 3) == 54312)
    expect(shr_u16(6789, 0) == 6789)
    expect(shr_u16(6789, 3) == 848)
    expect(shl_i16(-1000, 2) == -4000)
    expect(shl_i16(2000, 2) == 8000)
    expect(shr_i16(5000, 1) == 2500)
    expect(shr_i16(-4000, 2) == -1000)

    // test u8 op-assigns
    {
        var x = 1u8
        expect({x += 5} == 6)
        expect(x == 6)

        expect({x -= 2} == 4)
        expect(x == 4)

        expect({x *= 30} == 120)
        expect(x == 120)

        expect({x /= 6} == 20)
        expect(x == 20)

        expect({x <<= 3} == 160)
        expect(x == 160)

        expect({x >>= 2} == 40)
        expect(x == 40)

        expect({x |= 3} == 43)
        expect(x == 43)

        expect({x ^= 1} == 42)
        expect(x == 42)

        expect({x &= 0x23} == 0x22)
        expect(x == 0x22)

        expect({x %= 6} == 4)
        expect(x == 4)
    }

    // test u8 op-assigns
    {
        var x = 1234u16
        expect({x += 2345} == 3579)
        expect(x == 3579)

        expect({x -= 2345} == 1234)
        expect(x == 1234)

        expect({x |= 0x8181} == 0x85d3)
        expect(x == 0x85d3)

        expect({x &= 0xf0f0} == 0x80d0)
        expect(x == 0x80d0)

        expect({x ^= 0x8001} == 0xd1)
        expect(x == 0xd1)

        expect({x <<= 4} == 0xd10)
        expect(x == 0xd10)

        expect({x >>= 2} == 0x344)
        expect(x == 0x344)

        expect({x *= 3} == 0x9cc)
        expect(x == 0x9cc)

        expect({x /= 5} == 0x1f5)
        expect(x == 0x1f5)

        expect({x %= 0xc3} == 0x6f)
        expect(x == 0x6f)
    }

    test_u16_assigns()
    test_u8_assigns()
    test_const_globals()
    test_var_globals()
    test_ptr()
    test_ptr_arith()
    test_ptr_cast()
    test_loop()
    test_for()
    test_while()
    test_while_break()
    test_array_as_value()
    test_for_loop()
    expect(test_return(1) == 't')
    expect(test_return(0) == 'f')

    output_results()
}

// wrap operators to confound constant folding optimizer
fn log_not(a: bool) -> bool { !a }
fn log_and(a: bool, b: bool) -> bool { a && b }
fn log_or(a: bool, b: bool) -> bool { a || b }
fn bitnot_u8(a: u8) -> u8 { ~a }
fn bitnot_i8(a: i8) -> i8 { ~a }
fn bitnot_u16(a: u16) -> u16 { ~a }
fn bitand_u8(a: u8, b: u8) -> u8 { a & b }
fn bitand_i8(a: i8, b: i8) -> i8 { a & b }
fn bitand_u16(a: u16, b: u16) -> u16 { a & b }
fn bitor_u8(a: u8, b: u8) -> u8 { a | b }
fn bitor_i8(a: i8, b: i8) -> i8 { a | b }
fn bitor_u16(a: u16, b: u16) -> u16 { a | b }
fn bitxor_u8(a: u8, b: u8) -> u8 { a ^ b }
fn bitxor_i8(a: i8, b: i8) -> i8 { a ^ b }
fn bitxor_u16(a: u16, b: u16) -> u16 { a ^ b }
fn eq_u8(a: u8, b: u8) -> bool { a == b }
fn eq_i8(a: i8, b: i8) -> bool { a == b }
fn eq_u16(a: u16, b: u16) -> bool { a == b }
fn eq_i16(a: i16, b: i16) -> bool { a == b }
fn neq_u8(a: u8, b: u8) -> bool { a != b }
fn neq_i8(a: i8, b: i8) -> bool { a != b }
fn neq_u16(a: u16, b: u16) -> bool { a != b }
fn neq_i16(a: i16, b: i16) -> bool { a != b }
fn gt_u8(a: u8, b: u8) -> bool { a > b }
fn gt_i8(a: i8, b: i8) -> bool { a > b }
fn gt_u16(a: u16, b: u16) -> bool { a > b }
fn gt_i16(a: i16, b: i16) -> bool { a > b }
fn gte_u8(a: u8, b: u8) -> bool { a >= b }
fn gte_i8(a: i8, b: i8) -> bool { a >= b }
fn gte_u16(a: u16, b: u16) -> bool { a >= b }
fn gte_i16(a: i16, b: i16) -> bool { a >= b }
fn lt_u8(a: u8, b: u8) -> bool { a < b }
fn lt_i8(a: i8, b: i8) -> bool { a < b }
fn lt_u16(a: u16, b: u16) -> bool { a < b }
fn lt_i16(a: i16, b: i16) -> bool { a < b }
fn lte_u8(a: u8, b: u8) -> bool { a <= b }
fn lte_i8(a: i8, b: i8) -> bool { a <= b }
fn lte_u16(a: u16, b: u16) -> bool { a <= b }
fn lte_i16(a: i16, b: i16) -> bool { a <= b }
fn add_u8(a: u8, b: u8) -> u8 { a + b }
fn add_i8(a: i8, b: i8) -> i8 { a + b }
fn add_u16(a: u16, b: u16) -> u16 { a + b }
fn sub_u8(a: u8, b: u8) -> u8 { a - b }
fn sub_i8(a: i8, b: i8) -> i8 { a - b }
fn sub_u16(a: u16, b: u16) -> u16 { a - b }
fn div_u8(a: u8, b: u8) -> u8 { a / b }
fn div_i8(a: i8, b: i8) -> i8 { a / b }
fn div_u16(a: u16, b: u16) -> u16 { a / b }
fn mod_u8(a: u8, b: u8) -> u8 { a % b }
fn mod_i8(a: i8, b: i8) -> i8 { a % b }
fn mod_u16(a: u16, b: u16) -> u16 { a % b }
fn mul_u8(a: u8, b: u8) -> u8 { a * b }
fn mul_i8(a: i8, b: i8) -> i8 { a * b }
fn mul_u16(a: u16, b: u16) -> u16 { a * b }
fn shl_u8(a: u8, b: u8) -> u8 { a << b }
fn shr_u8(a: u8, b: u8) -> u8 { a >> b }
fn shl_i8(a: i8, b: i8) -> i8 { a << b }
fn shr_i8(a: i8, b: i8) -> i8 { a >> b }
fn shl_u16(a: u16, b: u16) -> u16 { a << b }
fn shr_u16(a: u16, b: u16) -> u16 { a >> b }
fn shl_i16(a: i16, b: i16) -> i16 { a << b }
fn shr_i16(a: i16, b: i16) -> i16 { a >> b }

fn test_for_loop() {
    /*
    var x = 1

    for var i=0 i<5 i+=1 {
        x <<= 1
    }

    expect(x == 16)
    */
}

fn test_return(v: u8) -> u8 {
    // allocate needless local, to check `return` deallocs stack frame correctly
    var i = 0u8
    if v == 0 return 'f' else return 't'
}

// can tell type, or infer from literal
const myconst_a: [u8; 12] = "Hello world",
      myconst_b = 2u16,
      // for arrays, either type must be given, or explicit in literal
      myconst_c = [[1u8,2u8,4u8,8u8],[2u8,3u8,4u8,9u8]],
      myconst_d: [[u8; 4]; 2] = [[1,2,4,8],[2,3,4,9]]

fn test_const_globals() {
    expect(myconst_a[0] == 'H')
    expect(myconst_a[1] == 'e')
    expect(myconst_b == 2)
    expect(myconst_c[0][0] == 1)
    expect(myconst_c[1][1] == 3)
}

fn test_u16_assigns() {
    var a: u16 = 3
    expect(a == 3)
    a = 5
    expect(a == 5)
    a += 4
    expect(a == 9)

    var b = a -= 2
    expect(a == b)
    expect(b == 7)
}

fn test_u8_assigns() {
    var a: u8 = 3
    expect(a == 3)
    a = 5
    expect(a == 5)
    a += 4
    expect(a == 9)

    var b = a -= 2
    expect(a == b)
    expect(b == 7)
}

fn test_fwd_decl(a: u8) -> u8;

`test_fwd_decl:
         ld hl, sp+3
         ld a, [hl]
         inc a
         ret
`

fn test_ptr_cast() {
    var x: u16 = 0xcafe
    expect(x@ as @u8# == 0xfe)
    expect({x@ as @u8 + 1}# == 0xca)
}

fn test_ptr_arith() {
    var a: [u16; 4],
        p: @u16

    p = a[0]@
    p# = 1
    p += 1
    p# = 2
    p = p + 2
    p# = 4

    p -= 1
    p# = 99

    p = p - 2
    expect(p# == 1)

    expect(a[0] == 1)
    expect(a[1] == 2)
    expect(a[2] == 99)
    expect(a[3] == 4)
}

fn test_ptr_arg(a: @u16) {
    a# = a# * 2;
}

fn test_ptr_array(a: @[u8; 3]) {
    a#[0] = 1
    a#[1] = 3
    a#[2] = 5
    {}
}

fn test_ptr() {
    var p: @u8,
        pp: @@u8,
        x: u8,
        y: u8

    //x = *p
    p = x@
    pp = p@
    p# = 20
    pp## = pp## + p# + 1
    y = p# + 10

    expect(x == 41)
    expect(y == 51)

    var z: u16 = 50
    test_ptr_arg(z@)
    expect(z == 100)

    var a: [u8; 3]
    test_ptr_array(a@)
    expect(a[0] == 1)
    expect(a[1] == 3)
    expect(a[2] == 5)
}

/* Show passed tests in reg 'b', failed tests in 'c', total in 'd',
 * elapsed time in 60ths of a second in `hl` */
fn output_results() {
    puts("TOTAL TESTS $" as @u8)
    puthex(total)
    putchar(10)
    putchar(10)
    if fails == 0 {
        puts("ALL PASSED" as @u8)
    } else {
        puts("FAILED TESTS $" as @u8)
        puthex(fails)
    }
}

fn local_scope_argpass(a: u8) -> u8 {
    a
}

fn test_local_scope(a: u8) -> u8 {
    var l1 = 10u8,
        l2: u8,
        l3: [u16; 2]

    expect(l1 == 10)

    // is stack screwed up?
    expect(a == 66)
    l1 = 4
    l2 = 1
    l3[0] = {l1 + l2} as u16
    l3[l2] = l3[0] + 1

    expect(l1 == 4)
    expect(l2 == 1)
    expect(l3[0] == 5)
    expect(l3[l2] == 6)
    expect(local_scope_argpass(l1) == 4)

    l3[1] as u8
}

fn test_for() {
    var i=0u8

    for j=0u8, k:u8=2; j<8; j+=1 {
        i = j + k
    }
    expect(i == 9)

    i=0
    for ;;i+=1 {
        if i==4 { break }
    }
    expect(i == 4)

    i=0
    for ;i<3;{} {
        i+=1
    }
    expect(i == 3)

    i=0
    for j=2u8;;{} {
        i=2*j
        j+=1
        if j>4 { break }
    }
    expect(i==8)

    i=0
    for ;;{} {
        i+=1
        if i==6 { break }
    }
    expect(i==6)
}

fn test_loop() {
    var i = 0u8

    'outer: loop {
        loop {
            i += 1
            if i == 10 { break 'outer }
        }
    }

    expect(i == 10)
}

fn test_while() {
    var i: u8 = 0
    var arr: [u8; 5]

    while i != 5 {
        arr[i] = -i
        i = i + 1
    }

    expect(i == 5)
    expect(arr[0] == 0)
    expect(arr[1] == -1)
    expect(arr[2] == -2)
    expect(arr[3] == -3)
    expect(arr[4] == -4)
}

fn test_while_break() {
    var i: u8 = 0
    var arr: [u8; 5]

    while i < 5 {
        arr[i] = 0
        i += 1
    }

    i=0
    while i < 5 {
        i = i + 1
        if i == 2 { continue }
        if i == 4 { i + {break 2} }
        //               ^^
        // intentionally break where a temporary is on the
        // stack, to check stack correction is right
        arr[i] = -i
    }

    expect(i == 4)
    expect(arr[0] == 0)
    expect(arr[1] == -1)
    expect(arr[2] == 0)
    expect(arr[3] == -3)
    expect(arr[4] == 0)

    i = 0
    'outer: while i < 100 {
        while i < 5 {
            i += 1
            arr[i] = 2+i
            if i == 2 { break 'outer }
            else { continue }
        }
    }

    expect(i == 2)
    expect(arr[0] == 0)
    expect(arr[1] == 3)
    expect(arr[2] == 4)
    expect(arr[3] == -3)
    expect(arr[4] == 0)
}

fn zero() -> u8 {
    var a: [u8; 3]
    a[0] = 123
    0
}

fn test_array_as_value() {
    var a: [u8; 3]

    a[0] = 0
    a[1] = 2
    a[2] = 4

    var b = a
    var c = _test_array_pass_and_return(a)

    // XXX this fails because calling zero() overwrites the temporary
    // return value of _test_array_pass_and_return. proper return by
    // value implementation needed
    //expect(_test_array_pass_and_return(a)[zero()]==10)

    expect(b[0] == a[0])
    expect(b[1] == a[1])
    expect(b[2] == a[2])

    b[1] = 13

    expect(a[0] == 0)
    expect(a[1] == 2)
    expect(a[2] == 4)

    expect(c[0] == 10)
    expect(c[1] == 20)
    expect(c[2] == 30)
}

fn _test_array_pass_and_return(a: [u8; 3]) -> [u8; 3] {
    var b: [u8; 3]
    expect(a[0] == 0)
    expect(a[1] == 2)
    expect(a[2] == 4)

    a[0] = 99

    b[0] = 10 b[1] = 20 b[2] = 30
    b
}
