include "li-code/softmath.li"; // needed for integer multiply

fn test_u8_arith(a: u8, b: u8) -> u8 {
  2+b+a-3
}

fn test_u16_arith(a: u16, b: u16, c: u16, d: u8) -> u16 {
  a + b + c - 0x10f0u16 & 0x33cc | 0xf00f ^ d as u16
}
fn test_cast_u16(a: u8) -> u16 { a as u16 }

fn test_cast_u8(a: u16) -> u8 { a as u8 }

fn test_u16_global() -> void {
    test_u16 = 10u16;
    test_u16 = test_u16 + test_u16;
    test_u16 = test_u16 + 1u16;
    if test_u16 == 21u16 { pass() } else { fail_() }
}

var passes: u8;
var fails: u8;
var total: u8;

var test_u16: u16;
var test_arr_u8: [u8; 4];
var test_arr_2d_u16: [[u16; 2]; 2];

fn pass() { passes = passes + 1; total = total + 1; }
fn fail_() { fails = fails + 1; total = total + 1; } // seems 'fail' is an rgbasm special thing...

var elapsed_vblanks: u16;

// on_vblank is a special function name. if it is defined then
// the li compiler will output a call to it from the vblank
// vector (ROM0 $40). You still need to enable interrupts, and
// enable the vblank interrupt flag specifically (bit 0 of $ffff)
// for the on_vblank handler to be called
fn on_vblank() {
    asm("
        push af
        push bc
        push de
        push hl

    ");
    elapsed_vblanks = elapsed_vblanks + 1u16;
    asm("
        pop hl
        pop de
        pop bc
        pop af
    ");
}

fn main() {
    // enable vblank interrupt
    elapsed_vblanks = 0u16;
    asm("
        ld a, 1
        ld [$ffff], a  ; enable vblank interrupt
        ei
    ");

    passes = fails = total = 0;

    // argument passing and arithmetic
    if test_u8_arith(4,0xf) == 0x12 { pass() } else { fail_() };

    if test_u16_arith(
        0x6543, 0x4567, 0x1234, 0x20
    ) == 0xf3ef { pass() } else { fail_() };

    if test_cast_u16(0xde) == 0xdeu16 { pass() } else { fail_() };
    if test_cast_u8(0xcafe) == 0xfe { pass() } else { fail_() };

    // multiply
    if 5*5 == 25 { pass() } else { fail_() };
    if 255*255 == 1 { pass() } else { fail_() };
    if 255u16*255u16 - 0xfe01 { fail_() } else { pass() };
    if 123u16*100u16 - 12300 { fail_() } else { pass() };

    // comparators
    if 4 != 4 { fail_() } else { pass() };
    if 5 != 6 { pass() } else { fail_() };
    if 0x1234 != 0x1234 { fail_() } else { pass() };
    if 0x1234 != 0x2345 { pass() } else { fail_() };

    test_u16_global();

    // arrays
    test_arr_u8[0] = 3;
    test_arr_u8[1] = test_arr_u8[0] + test_arr_u8[0];
    test_arr_u8[2] = test_arr_u8[1] + test_arr_u8[0];
    test_arr_u8[3] = test_arr_u8[2] + test_arr_u8[1];
    test_arr_2d_u16[0][0] = 0x1234;
    test_arr_2d_u16[0][1] = test_arr_2d_u16[0][0] - 1u16;
    test_arr_2d_u16[1][0] = test_arr_2d_u16[0][1] * 2u16;
    test_arr_2d_u16[1][1] = test_arr_2d_u16[1][0] + test_arr_2d_u16[0][0];
    if test_arr_u8[0] != 3 { fail_() } else { pass() };
    if test_arr_u8[1] != 6 { fail_() } else { pass() };
    if test_arr_u8[2] != 9 { fail_() } else { pass() };
    if test_arr_u8[3] != 15 { fail_() } else { pass() };
    if test_arr_2d_u16[0][0] != 0x1234 { fail_() } else { pass() };
    if test_arr_2d_u16[0][1] != 0x1233 { fail_() } else { pass() };
    if test_arr_2d_u16[1][0] != 0x2466 { fail_() } else { pass() };
    if test_arr_2d_u16[1][1] != 0x369a { fail_() } else { pass() };

    // if expression
    if (if 1 {0xcafe} else {0xdead}) == 0xcafe { pass() } else { fail_() };
    if (if 0 {0xcafe} else {0xdead}) == 0xdead { pass() } else { fail_() };

    // local scopes
    if local_scope_test(66) != 6 { fail_() } else { pass() };

    // while loops
    test_while();

    // forward/extern declarations
    if test_fwd_decl(2) != 3 { fail_() } else { pass() };

    test_ptr();
    test_ptr_arith();

    // logical ops
    if 1 && 1 { pass() } else { fail_() };
    if 0 && 1 { fail_() } else { pass() };
    if 1 && 0 { fail_() } else { pass() };
    if 0 && 0 { fail_() } else { pass() };
    if 1 || 1 { pass() } else { fail_() };
    if 0 || 1 { pass() } else { fail_() };
    if 1 || 0 { pass() } else { fail_() };
    if 0 || 0 { fail_() } else { pass() };

    // bitwise not
    if (~0xc0) != 0x3f { fail_() } else { pass() };
    if (~0xfc0fu16) != 0x3f0u16 { fail_() } else { pass() };

    // logical not
    if !5 { fail_() } else { pass() };
    if !0 { pass() } else { fail_() };
    if !500u16 { fail_() } else { pass() };
    if !0u16 { pass() } else { fail_() };

    // comparisons
    if 5>4 { pass() } else { fail_() };
    if 2>6 { fail_() } else { pass() };
    if 6>6 { fail_() } else { pass() };
    //if 0x1234>0x1233 { pass() } else { fail_() };
    //if 0x3456>0x3457 { fail_() } else { pass() };
    //if 0xcafe>0xcafe { fail_() } else { pass() };

    output_results();
}

fn test_fwd_decl(a: u8) -> u8;

asm(`
test_fwd_decl:
        ld hl, sp+3
        ld a, [hl]
        inc a
        ret
`);

fn test_ptr_arith() {
}

fn test_ptr_arg(a: &u16) {
    *a = *a * 2u16;
}

fn test_ptr_array(a: &[u8; 3]) {
    (*a)[0] = 1;
    (*a)[1] = 3;
    (*a)[2] = 5;
}

fn test_ptr() {
    var p: &u8;
    var pp: &&u8;
    var x: u8;
    var y: u8;

    //x = *p;
    p = &x;
    pp = &p;
    *p = 20;
    **pp = **pp + *p + 1;
    y = *p + 10;

    if x != 41 { fail_() } else { pass() };
    if y != 51 { fail_() } else { pass() };

    var z: u16;
    z = 50u16;
    test_ptr_arg(&z);
    if z != 100u16 { fail_() } else { pass() };

    var a: [u8; 3];
    test_ptr_array(&a);
    if a[0] != 1 { fail_() } else { pass() };
    if a[1] != 3 { fail_() } else { pass() };
    if a[2] != 5 { fail_() } else { pass() };
}

/* Show passed tests in reg 'b', failed tests in 'c', total in 'd',
 * elapsed time in 60ths of a second in `hl` */
fn output_results() {
    asm("
         ld hl, passes
         ld b, [hl]

         ld hl, fails
         ld c, [hl]

         ld hl, total
         ld d, [hl]

         ld a, [elapsed_vblanks]
         ld l, a
         ld a, [elapsed_vblanks+1]
         ld h, a

         xor a
         ld e, a

         db $dd");
}

fn local_scope_argpass(a: u8) -> u8 {
    a
}

fn local_scope_test(a: u8) -> u8 {
    var l1: u8;
    var l2: u8;
    var l3: [u16; 2];

    // is stack screwed up?
    if a != 66 { fail_() } else { pass() };
    l1 = 4;
    l2 = 1;
    l3[0] = (l1 + l2) as u16;
    l3[l2] = l3[0] + 1u16;

    if l1 != 4 { fail_() } else { pass() };
    if l2 != 1 { fail_() } else { pass() };
    if l3[0] != 5u16 { fail_() } else { pass() };
    if l3[l2] != 6u16 { fail_() } else { pass() };
    if local_scope_argpass(l1) != 4 { fail_() } else { pass() };

    l3[1] as u8
}

fn test_while() {
    var i: u8;
    var arr: [u8; 5];
    i=0;

    while i != 5 {
        arr[i] = -i;
        i = i + 1;
    };

    if i != 5 { fail_() } else { pass() };
    if arr[0] != 0 { fail_() } else { pass() };
    if arr[1] != -1 { fail_() } else { pass() };
    if arr[2] != -2 { fail_() } else { pass() };
    if arr[3] != -3 { fail_() } else { pass() };
    if arr[4] != -4 { fail_() } else { pass() };
}
