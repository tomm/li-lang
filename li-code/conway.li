include "li-code/softmath.li";
include "li-code/nonstdlib.li";

var friends: u8,
    map: [[u8; 16]; 16],
    map2: [[u8; 16]; 16];

fn get_map_wrapped(x: u8, y: u8) -> u8 { map[x&0xf][y&0xf] }

fn gen_tile(x: u8, y: u8) {
    var friends: u8 = 0;

    if get_map_wrapped(x-1, y-1) == 1 { friends = friends + 1 };
    if get_map_wrapped(x, y-1) == 1 { friends = friends + 1 };
    if get_map_wrapped(x+1, y-1) == 1 { friends = friends + 1 };
    if get_map_wrapped(x+1, y) == 1 { friends = friends + 1 };
    if get_map_wrapped(x+1, y+1) == 1 { friends = friends + 1 };
    if get_map_wrapped(x, y+1) == 1 { friends = friends + 1 };
    if get_map_wrapped(x-1, y+1) == 1 { friends = friends + 1 };
    if get_map_wrapped(x-1, y) == 1 { friends = friends + 1 };

    if map[x][y] == 1 {
        map2[x][y] = if (friends == 2) || (friends == 3) { 1 } else { 0 };
    } else {
        map2[x][y] = if friends == 3 { 1 } else { 0 };
    }
}

fn life_generation() {
    var x: u8,
        y = 0u8;

    while (y < 16) {
        x = 0;
        while (x < 16) {
            gen_tile(x, y);
            x += 1;
        };
        y += 1;
    };

    // copy map2 back to map
    memcpy(&map as &u8, &map2 as &u8, 16*16);
}

fn copy_tiles_to_vram() {
    //memcpy(0x9000 as &u8, tiles as &u8, tiles_end-tiles);
    asm("
        ld hl, tiles_end - tiles
        push hl
        ld hl, tiles
        push hl
        ld hl, $9000
        push hl
        call memcpy
        add sp, 6
    ")
}

fn lcd_off() {
    *(0xff40 as &u8) = 0;
}

fn lcd_on() {
    *(0xff40 as &u8) = 0x81; /* i want binary literals... */
}

fn wait_vblank() {
    asm("
    .loop:
        ld a, [$ff44]
        cp a, 144
        jr c, .loop
        cp a, 151
        jr nc, .loop
    ");
}

var rand_seed: u16;
fn rand() -> u8 {
    // 128 + 8 + 1
    rand_seed = (rand_seed * 137u16) + 1u16;
    // return high byte
    *((&rand_seed as &u8) + 1u16)
}

fn init_map() {
    var x=0u16, y=0u16;

    while y<16 {
        x = 0;
        while x<16 {
            map[y][x] = if rand() & 1 == 0 { 0 } else { 1 };
            x += 1;
        };
        y += 1;
    }
}

fn blit_map_to_vram() {
    asm("
        ld de, map

        FOR OFFSET, 0, 32*20, 32
            ; first make sure we are still in vblank, and
            ; if not wait for the next one
            call wait_vblank
            ld hl, $9800+OFFSET+34
            REPT 16
                ld a, [de]
                ld [hl+], a
                inc de
            ENDR
        ENDR
    ");
}

fn main() {
    // turn off sound
    *(0xff26 as &u8) = 0;

    wait_vblank();
    lcd_off();
    {
        // wipe VRAM
        memset(0x8000 as &u8, 0, 0xa000 - 0x8000);
        copy_tiles_to_vram();
        // set palette (4 greyscale)
        *(0xff47 as &u8) = 0xe4;
        // set x,y background scroll
        *(0xff42 as &u8) = 0;
        *(0xff43 as &u8) = 0;
    };
    lcd_on();

    rand_seed = 1;

    init_map();

    while 1 {
        wait_vblank();
        blit_map_to_vram();
        life_generation();
    }
}

// special RGBASM gameboy sprite literals
asm("
tiles:
        dw `00000000
        dw `00000000
        dw `00000000
        dw `00000000
        dw `00000000
        dw `00000000
        dw `00000000
        dw `00000000

        dw `33333333
        dw `33333333
        dw `33333333
        dw `33333333
        dw `33333333
        dw `33333333
        dw `33333333
        dw `33333333
tiles_end:
");
