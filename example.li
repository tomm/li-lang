fn test_u8_arith(a: u8, b: u8) -> u8 {
  2+b+a-3
}
fn test_u16_arith(a: u16, b: u16, c: u16, d: u8) -> u16 {
  a + b + c - 0x10f0u16 & 0x33cc | 0xf00f ^ d as u16
}
fn test_cast_u16(a: u8) -> u16 { a as u16 }

fn test_cast_u8(a: u16) -> u8 { a as u8 }

fn test_u16_global() -> void {
    test_u16 = 10u16;
    test_u16 = test_u16 + test_u16;
    test_u16 = test_u16 + 1u16;
    if test_u16 == 21u16 { pass() } else { fail_() }
}

var passes: u8;
var fails: u8;
var total: u8;

var test_u16: u16;
var test_arr_u8: [u8; 4];
var test_arr_2d_u16: [[u16; 2]; 2];

fn pass() { passes = passes + 1; total = total + 1; }
fn fail_() { fails = fails + 1; total = total + 1; } // seems 'fail' is an rgbasm special thing...

fn main() {
    passes = fails = total = 0;

    // argument passing and arithmetic
    if test_u8_arith(4,0xf) == 0x12 { pass() } else { fail_() };

    if test_u16_arith(
        0x6543, 0x4567, 0x1234, 0x20
    ) == 0xf3ef { pass() } else { fail_() };

    if test_cast_u16(0xde) == 0xdeu16 { pass() } else { fail_() };
    if test_cast_u8(0xcafe) == 0xfe { pass() } else { fail_() };

    // multiply
    if 5*5 == 25 { pass() } else { fail_() };
    if 255*255 == 1 { pass() } else { fail_() };
    if 255u16*255u16 - 0xfe01 { fail_() } else { pass() };
    if 123u16*100u16 - 12300 { fail_() } else { pass() };

    // comparators
    if 4 != 4 { fail_() } else { pass() };
    if 5 != 6 { pass() } else { fail_() };
    if 0x1234 != 0x1234 { fail_() } else { pass() };
    if 0x1234 != 0x2345 { pass() } else { fail_() };

    test_u16_global();

    // arrays
    test_arr_u8[0] = 3;
    test_arr_u8[1] = test_arr_u8[0] + test_arr_u8[0];
    test_arr_u8[2] = test_arr_u8[1] + test_arr_u8[0];
    test_arr_u8[3] = test_arr_u8[2] + test_arr_u8[1];
    test_arr_2d_u16[0][0] = 0x1234;
    test_arr_2d_u16[0][1] = test_arr_2d_u16[0][0] - 1u16;
    test_arr_2d_u16[1][0] = test_arr_2d_u16[0][1] * 2u16;
    test_arr_2d_u16[1][1] = test_arr_2d_u16[1][0] + test_arr_2d_u16[0][0];
    if test_arr_u8[0] != 3 { fail_() } else { pass() };
    if test_arr_u8[1] != 6 { fail_() } else { pass() };
    if test_arr_u8[2] != 9 { fail_() } else { pass() };
    if test_arr_u8[3] != 15 { fail_() } else { pass() };
    if test_arr_2d_u16[0][0] != 0x1234 { fail_() } else { pass() };
    if test_arr_2d_u16[0][1] != 0x1233 { fail_() } else { pass() };
    if test_arr_2d_u16[1][0] != 0x2466 { fail_() } else { pass() };
    if test_arr_2d_u16[1][1] != 0x369a { fail_() } else { pass() };

    // if expression
    if (if 1 {0xcafe} else {0xdead}) == 0xcafe { pass() } else { fail_() };
    if (if 0 {0xcafe} else {0xdead}) == 0xdead { pass() } else { fail_() };

    output_results();
}

/* Show passed tests in reg 'a', failed tests in 'b', total in 'c' */
fn output_results() {
    
    asm("
         ld a, [passes]
         ld hl, fails
         ld b, [hl]
         ld hl, total
         ld c, [hl]
         db $dd");
}
